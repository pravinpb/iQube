{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df  = pd.read_csv(\"C:\\\\Users\\\\USER\\\\Downloads\\\\train (1).csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POSTED_BY</th>\n",
       "      <th>UNDER_CONSTRUCTION</th>\n",
       "      <th>RERA</th>\n",
       "      <th>BHK_NO.</th>\n",
       "      <th>BHK_OR_RK</th>\n",
       "      <th>SQUARE_FT</th>\n",
       "      <th>READY_TO_MOVE</th>\n",
       "      <th>RESALE</th>\n",
       "      <th>ADDRESS</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>TARGET(PRICE_IN_LACS)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Owner</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>BHK</td>\n",
       "      <td>1300.236407</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Ksfc Layout,Bangalore</td>\n",
       "      <td>12.969910</td>\n",
       "      <td>77.597960</td>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dealer</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>BHK</td>\n",
       "      <td>1275.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Vishweshwara Nagar,Mysore</td>\n",
       "      <td>12.274538</td>\n",
       "      <td>76.644605</td>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Owner</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>BHK</td>\n",
       "      <td>933.159722</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Jigani,Bangalore</td>\n",
       "      <td>12.778033</td>\n",
       "      <td>77.632191</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Owner</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>BHK</td>\n",
       "      <td>929.921143</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Sector-1 Vaishali,Ghaziabad</td>\n",
       "      <td>28.642300</td>\n",
       "      <td>77.344500</td>\n",
       "      <td>62.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Dealer</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>BHK</td>\n",
       "      <td>999.009247</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>New Town,Kolkata</td>\n",
       "      <td>22.592200</td>\n",
       "      <td>88.484911</td>\n",
       "      <td>60.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  POSTED_BY  UNDER_CONSTRUCTION  RERA  BHK_NO. BHK_OR_RK    SQUARE_FT  \\\n",
       "0     Owner                   0     0        2       BHK  1300.236407   \n",
       "1    Dealer                   0     0        2       BHK  1275.000000   \n",
       "2     Owner                   0     0        2       BHK   933.159722   \n",
       "3     Owner                   0     1        2       BHK   929.921143   \n",
       "4    Dealer                   1     0        2       BHK   999.009247   \n",
       "\n",
       "   READY_TO_MOVE  RESALE                      ADDRESS  LONGITUDE   LATITUDE  \\\n",
       "0              1       1        Ksfc Layout,Bangalore  12.969910  77.597960   \n",
       "1              1       1    Vishweshwara Nagar,Mysore  12.274538  76.644605   \n",
       "2              1       1             Jigani,Bangalore  12.778033  77.632191   \n",
       "3              1       1  Sector-1 Vaishali,Ghaziabad  28.642300  77.344500   \n",
       "4              0       1             New Town,Kolkata  22.592200  88.484911   \n",
       "\n",
       "   TARGET(PRICE_IN_LACS)  \n",
       "0                   55.0  \n",
       "1                   51.0  \n",
       "2                   43.0  \n",
       "3                   62.5  \n",
       "4                   60.5  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29451, 12)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['BHK', 'RK'], dtype=object)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.BHK_OR_RK.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POSTED_BY</th>\n",
       "      <th>UNDER_CONSTRUCTION</th>\n",
       "      <th>RERA</th>\n",
       "      <th>BHK_NO.</th>\n",
       "      <th>BHK_OR_RK</th>\n",
       "      <th>SQUARE_FT</th>\n",
       "      <th>READY_TO_MOVE</th>\n",
       "      <th>RESALE</th>\n",
       "      <th>ADDRESS</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>TARGET(PRICE_IN_LACS)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>29446</th>\n",
       "      <td>Owner</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>BHK</td>\n",
       "      <td>2500.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Shamshabad Road,Agra</td>\n",
       "      <td>27.140626</td>\n",
       "      <td>78.043277</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29447</th>\n",
       "      <td>Owner</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>BHK</td>\n",
       "      <td>769.230769</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>E3-108, Lake View Recidency,,Vapi</td>\n",
       "      <td>39.945409</td>\n",
       "      <td>-86.150721</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29448</th>\n",
       "      <td>Dealer</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>BHK</td>\n",
       "      <td>1022.641509</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Ajmer Road,Jaipur</td>\n",
       "      <td>26.928785</td>\n",
       "      <td>75.828002</td>\n",
       "      <td>27.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29449</th>\n",
       "      <td>Owner</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>BHK</td>\n",
       "      <td>927.079009</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Sholinganallur,Chennai</td>\n",
       "      <td>12.900150</td>\n",
       "      <td>80.227910</td>\n",
       "      <td>67.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29450</th>\n",
       "      <td>Dealer</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>BHK</td>\n",
       "      <td>896.774194</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Jagatpura,Jaipur</td>\n",
       "      <td>26.832353</td>\n",
       "      <td>75.841749</td>\n",
       "      <td>27.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      POSTED_BY  UNDER_CONSTRUCTION  RERA  BHK_NO. BHK_OR_RK    SQUARE_FT  \\\n",
       "29446     Owner                   0     0        3       BHK  2500.000000   \n",
       "29447     Owner                   0     0        2       BHK   769.230769   \n",
       "29448    Dealer                   0     0        2       BHK  1022.641509   \n",
       "29449     Owner                   0     0        2       BHK   927.079009   \n",
       "29450    Dealer                   0     1        2       BHK   896.774194   \n",
       "\n",
       "       READY_TO_MOVE  RESALE                            ADDRESS  LONGITUDE  \\\n",
       "29446              1       1               Shamshabad Road,Agra  27.140626   \n",
       "29447              1       1  E3-108, Lake View Recidency,,Vapi  39.945409   \n",
       "29448              1       1                  Ajmer Road,Jaipur  26.928785   \n",
       "29449              1       1             Sholinganallur,Chennai  12.900150   \n",
       "29450              1       1                   Jagatpura,Jaipur  26.832353   \n",
       "\n",
       "        LATITUDE  TARGET(PRICE_IN_LACS)  \n",
       "29446  78.043277                   45.0  \n",
       "29447 -86.150721                   16.0  \n",
       "29448  75.828002                   27.1  \n",
       "29449  80.227910                   67.0  \n",
       "29450  75.841749                   27.8  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29451, 12)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK',\n",
       "       'SQUARE_FT', 'READY_TO_MOVE', 'RESALE', 'ADDRESS', 'LONGITUDE',\n",
       "       'LATITUDE', 'TARGET(PRICE_IN_LACS)'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c = df.columns\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29451, 12)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns = ['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK',\n",
    "       'SQUARE_FT', 'READY_TO_MOVE', 'RESALE', 'ADDRESS', 'LONGITUDE',\n",
    "       'LATITUDE', 'TARGET_in_lakhs']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "POSTED_BY                 3\n",
       "UNDER_CONSTRUCTION        2\n",
       "RERA                      2\n",
       "BHK_NO.                  16\n",
       "BHK_OR_RK                 2\n",
       "SQUARE_FT             19561\n",
       "READY_TO_MOVE             2\n",
       "RESALE                    2\n",
       "ADDRESS                6899\n",
       "LONGITUDE              4087\n",
       "LATITUDE               4078\n",
       "TARGET_in_lakhs        1172\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 29451 entries, 0 to 29450\n",
      "Data columns (total 12 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   POSTED_BY           29451 non-null  object \n",
      " 1   UNDER_CONSTRUCTION  29451 non-null  int64  \n",
      " 2   RERA                29451 non-null  int64  \n",
      " 3   BHK_NO.             29451 non-null  int64  \n",
      " 4   BHK_OR_RK           29451 non-null  object \n",
      " 5   SQUARE_FT           29451 non-null  float64\n",
      " 6   READY_TO_MOVE       29451 non-null  int64  \n",
      " 7   RESALE              29451 non-null  int64  \n",
      " 8   ADDRESS             29451 non-null  object \n",
      " 9   LONGITUDE           29451 non-null  float64\n",
      " 10  LATITUDE            29451 non-null  float64\n",
      " 11  TARGET_in_lakhs     29451 non-null  float64\n",
      "dtypes: float64(4), int64(5), object(3)\n",
      "memory usage: 2.7+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "POSTED_BY             0\n",
       "UNDER_CONSTRUCTION    0\n",
       "RERA                  0\n",
       "BHK_NO.               0\n",
       "BHK_OR_RK             0\n",
       "SQUARE_FT             0\n",
       "READY_TO_MOVE         0\n",
       "RESALE                0\n",
       "ADDRESS               0\n",
       "LONGITUDE             0\n",
       "LATITUDE              0\n",
       "TARGET_in_lakhs       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UNDER_CONSTRUCTION</th>\n",
       "      <th>RERA</th>\n",
       "      <th>BHK_NO.</th>\n",
       "      <th>SQUARE_FT</th>\n",
       "      <th>READY_TO_MOVE</th>\n",
       "      <th>RESALE</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>TARGET_in_lakhs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>29451.000000</td>\n",
       "      <td>29451.000000</td>\n",
       "      <td>29451.000000</td>\n",
       "      <td>2.945100e+04</td>\n",
       "      <td>29451.000000</td>\n",
       "      <td>29451.000000</td>\n",
       "      <td>29451.000000</td>\n",
       "      <td>29451.000000</td>\n",
       "      <td>29451.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.179756</td>\n",
       "      <td>0.317918</td>\n",
       "      <td>2.392279</td>\n",
       "      <td>1.980217e+04</td>\n",
       "      <td>0.820244</td>\n",
       "      <td>0.929578</td>\n",
       "      <td>21.300255</td>\n",
       "      <td>76.837695</td>\n",
       "      <td>142.898746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.383991</td>\n",
       "      <td>0.465675</td>\n",
       "      <td>0.879091</td>\n",
       "      <td>1.901335e+06</td>\n",
       "      <td>0.383991</td>\n",
       "      <td>0.255861</td>\n",
       "      <td>6.205306</td>\n",
       "      <td>10.557747</td>\n",
       "      <td>656.880713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-37.713008</td>\n",
       "      <td>-121.761248</td>\n",
       "      <td>0.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>9.000211e+02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>18.452663</td>\n",
       "      <td>73.798100</td>\n",
       "      <td>38.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.175057e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.750000</td>\n",
       "      <td>77.324137</td>\n",
       "      <td>62.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.550688e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>26.900926</td>\n",
       "      <td>77.828740</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>2.545455e+08</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>59.912884</td>\n",
       "      <td>152.962676</td>\n",
       "      <td>30000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       UNDER_CONSTRUCTION          RERA       BHK_NO.     SQUARE_FT  \\\n",
       "count        29451.000000  29451.000000  29451.000000  2.945100e+04   \n",
       "mean             0.179756      0.317918      2.392279  1.980217e+04   \n",
       "std              0.383991      0.465675      0.879091  1.901335e+06   \n",
       "min              0.000000      0.000000      1.000000  3.000000e+00   \n",
       "25%              0.000000      0.000000      2.000000  9.000211e+02   \n",
       "50%              0.000000      0.000000      2.000000  1.175057e+03   \n",
       "75%              0.000000      1.000000      3.000000  1.550688e+03   \n",
       "max              1.000000      1.000000     20.000000  2.545455e+08   \n",
       "\n",
       "       READY_TO_MOVE        RESALE     LONGITUDE      LATITUDE  \\\n",
       "count   29451.000000  29451.000000  29451.000000  29451.000000   \n",
       "mean        0.820244      0.929578     21.300255     76.837695   \n",
       "std         0.383991      0.255861      6.205306     10.557747   \n",
       "min         0.000000      0.000000    -37.713008   -121.761248   \n",
       "25%         1.000000      1.000000     18.452663     73.798100   \n",
       "50%         1.000000      1.000000     20.750000     77.324137   \n",
       "75%         1.000000      1.000000     26.900926     77.828740   \n",
       "max         1.000000      1.000000     59.912884    152.962676   \n",
       "\n",
       "       TARGET_in_lakhs  \n",
       "count     29451.000000  \n",
       "mean        142.898746  \n",
       "std         656.880713  \n",
       "min           0.250000  \n",
       "25%          38.000000  \n",
       "50%          62.000000  \n",
       "75%         100.000000  \n",
       "max       30000.000000  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dealer     18291\n",
       "Owner      10538\n",
       "Builder      622\n",
       "Name: POSTED_BY, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.POSTED_BY.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2619.047619\n",
      "550.0\n"
     ]
    }
   ],
   "source": [
    "max_hold = df[\"SQUARE_FT\"].quantile(0.95)\n",
    "min_hold = df[\"SQUARE_FT\"].quantile(0.05)\n",
    "print(max_hold)\n",
    "print(min_hold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>POSTED_BY</th>\n",
       "      <th>UNDER_CONSTRUCTION</th>\n",
       "      <th>RERA</th>\n",
       "      <th>BHK_NO.</th>\n",
       "      <th>BHK_OR_RK</th>\n",
       "      <th>SQUARE_FT</th>\n",
       "      <th>READY_TO_MOVE</th>\n",
       "      <th>RESALE</th>\n",
       "      <th>ADDRESS</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>TARGET_in_lakhs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Dealer</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>BHK</td>\n",
       "      <td>40606.195680</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Kanjur Marg (East),Lalitpur</td>\n",
       "      <td>24.690280</td>\n",
       "      <td>78.418890</td>\n",
       "      <td>9110.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>Owner</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>BHK</td>\n",
       "      <td>5200.945626</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Sector-76 Noida,Noida</td>\n",
       "      <td>28.567633</td>\n",
       "      <td>77.383124</td>\n",
       "      <td>110.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>Owner</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>BHK</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Malviya Nagar,Jaipur</td>\n",
       "      <td>26.850391</td>\n",
       "      <td>75.814198</td>\n",
       "      <td>85.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>Owner</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>BHK</td>\n",
       "      <td>2738.225630</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Basapura,Bangalore</td>\n",
       "      <td>12.863421</td>\n",
       "      <td>77.652405</td>\n",
       "      <td>150.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>Dealer</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>BHK</td>\n",
       "      <td>2750.929368</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Sikandra,Agra</td>\n",
       "      <td>27.216013</td>\n",
       "      <td>77.950834</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29396</th>\n",
       "      <td>Dealer</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>BHK</td>\n",
       "      <td>4078.014184</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Manpada,Lalitpur</td>\n",
       "      <td>24.690280</td>\n",
       "      <td>78.418890</td>\n",
       "      <td>920.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29409</th>\n",
       "      <td>Dealer</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>BHK</td>\n",
       "      <td>5399.568035</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Vesu,Surat</td>\n",
       "      <td>21.143354</td>\n",
       "      <td>72.770931</td>\n",
       "      <td>400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29411</th>\n",
       "      <td>Dealer</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>BHK</td>\n",
       "      <td>2843.973718</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Pashan,Pune</td>\n",
       "      <td>18.544200</td>\n",
       "      <td>73.794800</td>\n",
       "      <td>290.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29415</th>\n",
       "      <td>Owner</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>BHK</td>\n",
       "      <td>3650.240584</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Whitefield,Bangalore</td>\n",
       "      <td>12.995893</td>\n",
       "      <td>77.761394</td>\n",
       "      <td>220.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29425</th>\n",
       "      <td>Dealer</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>BHK</td>\n",
       "      <td>2800.074669</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Andheri (West),Lalitpur</td>\n",
       "      <td>19.139348</td>\n",
       "      <td>72.820458</td>\n",
       "      <td>750.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1471 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      POSTED_BY  UNDER_CONSTRUCTION  RERA  BHK_NO. BHK_OR_RK     SQUARE_FT  \\\n",
       "40       Dealer                   1     1        1       BHK  40606.195680   \n",
       "57        Owner                   0     1        4       BHK   5200.945626   \n",
       "68        Owner                   0     0        2       BHK   5000.000000   \n",
       "92        Owner                   0     0        3       BHK   2738.225630   \n",
       "117      Dealer                   0     0        4       BHK   2750.929368   \n",
       "...         ...                 ...   ...      ...       ...           ...   \n",
       "29396    Dealer                   0     0        5       BHK   4078.014184   \n",
       "29409    Dealer                   0     1        4       BHK   5399.568035   \n",
       "29411    Dealer                   0     0        4       BHK   2843.973718   \n",
       "29415     Owner                   0     0        4       BHK   3650.240584   \n",
       "29425    Dealer                   0     0        4       BHK   2800.074669   \n",
       "\n",
       "       READY_TO_MOVE  RESALE                      ADDRESS  LONGITUDE  \\\n",
       "40                 0       0  Kanjur Marg (East),Lalitpur  24.690280   \n",
       "57                 1       1        Sector-76 Noida,Noida  28.567633   \n",
       "68                 1       1         Malviya Nagar,Jaipur  26.850391   \n",
       "92                 1       1           Basapura,Bangalore  12.863421   \n",
       "117                1       1                Sikandra,Agra  27.216013   \n",
       "...              ...     ...                          ...        ...   \n",
       "29396              1       1             Manpada,Lalitpur  24.690280   \n",
       "29409              1       1                   Vesu,Surat  21.143354   \n",
       "29411              1       1                  Pashan,Pune  18.544200   \n",
       "29415              1       1         Whitefield,Bangalore  12.995893   \n",
       "29425              1       1      Andheri (West),Lalitpur  19.139348   \n",
       "\n",
       "        LATITUDE  TARGET_in_lakhs  \n",
       "40     78.418890           9110.0  \n",
       "57     77.383124            110.0  \n",
       "68     75.814198             85.0  \n",
       "92     77.652405            150.0  \n",
       "117    77.950834             74.0  \n",
       "...          ...              ...  \n",
       "29396  78.418890            920.0  \n",
       "29409  72.770931            400.0  \n",
       "29411  73.794800            290.0  \n",
       "29415  77.761394            220.0  \n",
       "29425  72.820458            750.0  \n",
       "\n",
       "[1471 rows x 12 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clear = df[max_hold < df[\"SQUARE_FT\"]]\n",
    "clear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UNDER_CONSTRUCTION</th>\n",
       "      <th>RERA</th>\n",
       "      <th>BHK_NO.</th>\n",
       "      <th>SQUARE_FT</th>\n",
       "      <th>READY_TO_MOVE</th>\n",
       "      <th>RESALE</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>TARGET_in_lakhs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>UNDER_CONSTRUCTION</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.363826</td>\n",
       "      <td>-0.040712</td>\n",
       "      <td>-0.004204</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.347405</td>\n",
       "      <td>0.006440</td>\n",
       "      <td>-0.000381</td>\n",
       "      <td>0.055399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RERA</th>\n",
       "      <td>0.363826</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.009547</td>\n",
       "      <td>-0.006229</td>\n",
       "      <td>-0.363826</td>\n",
       "      <td>-0.270351</td>\n",
       "      <td>0.104976</td>\n",
       "      <td>-0.065106</td>\n",
       "      <td>0.067636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BHK_NO.</th>\n",
       "      <td>-0.040712</td>\n",
       "      <td>0.009547</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.005303</td>\n",
       "      <td>0.040712</td>\n",
       "      <td>0.014581</td>\n",
       "      <td>0.068730</td>\n",
       "      <td>0.046930</td>\n",
       "      <td>0.112283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SQUARE_FT</th>\n",
       "      <td>-0.004204</td>\n",
       "      <td>-0.006229</td>\n",
       "      <td>0.005303</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.004204</td>\n",
       "      <td>0.001732</td>\n",
       "      <td>-0.012591</td>\n",
       "      <td>0.000803</td>\n",
       "      <td>0.402685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>READY_TO_MOVE</th>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.363826</td>\n",
       "      <td>0.040712</td>\n",
       "      <td>0.004204</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.347405</td>\n",
       "      <td>-0.006440</td>\n",
       "      <td>0.000381</td>\n",
       "      <td>-0.055399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RESALE</th>\n",
       "      <td>-0.347405</td>\n",
       "      <td>-0.270351</td>\n",
       "      <td>0.014581</td>\n",
       "      <td>0.001732</td>\n",
       "      <td>0.347405</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.024038</td>\n",
       "      <td>0.014844</td>\n",
       "      <td>-0.207378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LONGITUDE</th>\n",
       "      <td>0.006440</td>\n",
       "      <td>0.104976</td>\n",
       "      <td>0.068730</td>\n",
       "      <td>-0.012591</td>\n",
       "      <td>-0.006440</td>\n",
       "      <td>0.024038</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.155062</td>\n",
       "      <td>-0.031112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LATITUDE</th>\n",
       "      <td>-0.000381</td>\n",
       "      <td>-0.065106</td>\n",
       "      <td>0.046930</td>\n",
       "      <td>0.000803</td>\n",
       "      <td>0.000381</td>\n",
       "      <td>0.014844</td>\n",
       "      <td>-0.155062</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.017254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TARGET_in_lakhs</th>\n",
       "      <td>0.055399</td>\n",
       "      <td>0.067636</td>\n",
       "      <td>0.112283</td>\n",
       "      <td>0.402685</td>\n",
       "      <td>-0.055399</td>\n",
       "      <td>-0.207378</td>\n",
       "      <td>-0.031112</td>\n",
       "      <td>-0.017254</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    UNDER_CONSTRUCTION      RERA   BHK_NO.  SQUARE_FT  \\\n",
       "UNDER_CONSTRUCTION            1.000000  0.363826 -0.040712  -0.004204   \n",
       "RERA                          0.363826  1.000000  0.009547  -0.006229   \n",
       "BHK_NO.                      -0.040712  0.009547  1.000000   0.005303   \n",
       "SQUARE_FT                    -0.004204 -0.006229  0.005303   1.000000   \n",
       "READY_TO_MOVE                -1.000000 -0.363826  0.040712   0.004204   \n",
       "RESALE                       -0.347405 -0.270351  0.014581   0.001732   \n",
       "LONGITUDE                     0.006440  0.104976  0.068730  -0.012591   \n",
       "LATITUDE                     -0.000381 -0.065106  0.046930   0.000803   \n",
       "TARGET_in_lakhs               0.055399  0.067636  0.112283   0.402685   \n",
       "\n",
       "                    READY_TO_MOVE    RESALE  LONGITUDE  LATITUDE  \\\n",
       "UNDER_CONSTRUCTION      -1.000000 -0.347405   0.006440 -0.000381   \n",
       "RERA                    -0.363826 -0.270351   0.104976 -0.065106   \n",
       "BHK_NO.                  0.040712  0.014581   0.068730  0.046930   \n",
       "SQUARE_FT                0.004204  0.001732  -0.012591  0.000803   \n",
       "READY_TO_MOVE            1.000000  0.347405  -0.006440  0.000381   \n",
       "RESALE                   0.347405  1.000000   0.024038  0.014844   \n",
       "LONGITUDE               -0.006440  0.024038   1.000000 -0.155062   \n",
       "LATITUDE                 0.000381  0.014844  -0.155062  1.000000   \n",
       "TARGET_in_lakhs         -0.055399 -0.207378  -0.031112 -0.017254   \n",
       "\n",
       "                    TARGET_in_lakhs  \n",
       "UNDER_CONSTRUCTION         0.055399  \n",
       "RERA                       0.067636  \n",
       "BHK_NO.                    0.112283  \n",
       "SQUARE_FT                  0.402685  \n",
       "READY_TO_MOVE             -0.055399  \n",
       "RESALE                    -0.207378  \n",
       "LONGITUDE                 -0.031112  \n",
       "LATITUDE                  -0.017254  \n",
       "TARGET_in_lakhs            1.000000  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'UNDER_CONSTRUCTION'}>,\n",
       "        <AxesSubplot:title={'center':'RERA'}>,\n",
       "        <AxesSubplot:title={'center':'BHK_NO.'}>],\n",
       "       [<AxesSubplot:title={'center':'SQUARE_FT'}>,\n",
       "        <AxesSubplot:title={'center':'READY_TO_MOVE'}>,\n",
       "        <AxesSubplot:title={'center':'RESALE'}>],\n",
       "       [<AxesSubplot:title={'center':'LONGITUDE'}>,\n",
       "        <AxesSubplot:title={'center':'LATITUDE'}>,\n",
       "        <AxesSubplot:title={'center':'TARGET_in_lakhs'}>]], dtype=object)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'TARGET_in_lakhs'}>]], dtype=object)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(\"TARGET_in_lakhs\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x222051d8e80>]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df['SQUARE_FT'],df['TARGET_in_lakhs'],marker = \"o\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\seaborn\\axisgrid.py:337: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(msg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x22205191ab0>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 224x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.FacetGrid(df,size = 3).map(plt.scatter,\"SQUARE_FT\",\"TARGET_in_lakhs\").add_legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data,xticklabels = data.columns,yticklabels = data.columns,annot = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=df.loc[0:29451,[\n",
    "       'SQUARE_FT', 'LONGITUDE',\n",
    "       'LATITUDE']]\n",
    "Y=df.loc[0:29451, ['TARGET_in_lakhs']]\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=0, train_size = .75)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2220559c790>,\n",
       " <matplotlib.lines.Line2D at 0x2220559c850>,\n",
       " <matplotlib.lines.Line2D at 0x2220559c970>]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(X,Y,color='Black',marker='o',markerfacecolor = \"red\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sns.boxplot(x='SQUARE_FT', y='LONGITUDE', data=X, palette='rainbow')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29451, 12)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Owner', 'Dealer', 'Builder'], dtype=object)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.POSTED_BY.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SQUARE_FT</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1300.236407</td>\n",
       "      <td>12.969910</td>\n",
       "      <td>77.597960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1275.000000</td>\n",
       "      <td>12.274538</td>\n",
       "      <td>76.644605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>933.159722</td>\n",
       "      <td>12.778033</td>\n",
       "      <td>77.632191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>929.921143</td>\n",
       "      <td>28.642300</td>\n",
       "      <td>77.344500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>999.009247</td>\n",
       "      <td>22.592200</td>\n",
       "      <td>88.484911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29446</th>\n",
       "      <td>2500.000000</td>\n",
       "      <td>27.140626</td>\n",
       "      <td>78.043277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29447</th>\n",
       "      <td>769.230769</td>\n",
       "      <td>39.945409</td>\n",
       "      <td>-86.150721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29448</th>\n",
       "      <td>1022.641509</td>\n",
       "      <td>26.928785</td>\n",
       "      <td>75.828002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29449</th>\n",
       "      <td>927.079009</td>\n",
       "      <td>12.900150</td>\n",
       "      <td>80.227910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29450</th>\n",
       "      <td>896.774194</td>\n",
       "      <td>26.832353</td>\n",
       "      <td>75.841749</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>29451 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         SQUARE_FT  LONGITUDE   LATITUDE\n",
       "0      1300.236407  12.969910  77.597960\n",
       "1      1275.000000  12.274538  76.644605\n",
       "2       933.159722  12.778033  77.632191\n",
       "3       929.921143  28.642300  77.344500\n",
       "4       999.009247  22.592200  88.484911\n",
       "...            ...        ...        ...\n",
       "29446  2500.000000  27.140626  78.043277\n",
       "29447   769.230769  39.945409 -86.150721\n",
       "29448  1022.641509  26.928785  75.828002\n",
       "29449   927.079009  12.900150  80.227910\n",
       "29450   896.774194  26.832353  75.841749\n",
       "\n",
       "[29451 rows x 3 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TARGET_in_lakhs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29446</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29447</th>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29448</th>\n",
       "      <td>27.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29449</th>\n",
       "      <td>67.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29450</th>\n",
       "      <td>27.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>29451 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       TARGET_in_lakhs\n",
       "0                 55.0\n",
       "1                 51.0\n",
       "2                 43.0\n",
       "3                 62.5\n",
       "4                 60.5\n",
       "...                ...\n",
       "29446             45.0\n",
       "29447             16.0\n",
       "29448             27.1\n",
       "29449             67.0\n",
       "29450             27.8\n",
       "\n",
       "[29451 rows x 1 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "poly = PolynomialFeatures(degree = 8,interaction_only=True,include_bias=False)\n",
    "data = poly.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.30023641e+03, 1.29699100e+01, 7.75979600e+01, ...,\n",
       "        1.00895693e+05, 1.00643856e+03, 1.30860805e+06],\n",
       "       [1.27500000e+03, 1.22745380e+01, 7.66446050e+01, ...,\n",
       "        9.77218714e+04, 9.40777117e+02, 1.19949082e+06],\n",
       "       [9.33159722e+02, 1.27780330e+01, 7.76321910e+01, ...,\n",
       "        7.24432338e+04, 9.91986698e+02, 9.25682032e+05],\n",
       "       ...,\n",
       "       [1.02264151e+03, 2.69287850e+01, 7.58280020e+01, ...,\n",
       "        7.75448624e+04, 2.04195596e+03, 2.08818893e+06],\n",
       "       [9.27079009e+02, 1.29001500e+01, 8.02279100e+01, ...,\n",
       "        7.43776113e+04, 1.03495207e+03, 9.59482343e+05],\n",
       "       [8.96774194e+02, 2.68323530e+01, 7.58417490e+01, ...,\n",
       "        6.80129233e+04, 2.03501258e+03, 1.82494677e+06]])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Creating object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "regressor=LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m1 = regressor.fit(data,Y)\n",
    "# this model is for if degree of polynomial we get residual will reduce \n",
    "m1\n",
    "# i have question in this "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "reducing varience using regularization "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.00973119, -1.34247787,  0.07201136],\n",
       "       [-0.00974446, -1.45454064, -0.01828927],\n",
       "       [-0.00992425, -1.37339983,  0.07525368],\n",
       "       ...,\n",
       "       [-0.00987719,  0.90706647, -0.09563692],\n",
       "       [-0.00992745, -1.35372005,  0.32111704],\n",
       "       [-0.00994339,  0.89152595, -0.09433482]])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "standard = StandardScaler()\n",
    "standard_data = standard.fit_transform(X)\n",
    "standard_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RidgeCV(alphas=(0.1, 1, 10))</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RidgeCV</label><div class=\"sk-toggleable__content\"><pre>RidgeCV(alphas=(0.1, 1, 10))</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RidgeCV(alphas=(0.1, 1, 10))"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import RidgeCV\n",
    "# this is for  reduce varience  \n",
    "var = RidgeCV(alphas=(0.1, 1, 10))\n",
    "m2 = var.fit(standard_data,Y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.0"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m2.alpha_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#training the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = regressor.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "another one what is differeent b/t m1 and model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#using the training dataset for the prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[316.93431144],\n",
       "       [125.48549391],\n",
       "       [154.09578131],\n",
       "       ...,\n",
       "       [170.92584305],\n",
       "       [157.27176665],\n",
       "       [171.04490461]])"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = model.predict(X_test)\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[125.5881858]])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input = [[\t796.77,26.832353\t,75.841749]]\n",
    "pred1 = model.predict(input)\n",
    "pred1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count = 0\n",
    "# for i in pred:\n",
    "#     if i in pred:\n",
    "#         for j in Y_test:\n",
    "#             if i == j:\n",
    "#                count += 1\n",
    "\n",
    "# print(count) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TARGET_in_lakhs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>26350</th>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23308</th>\n",
       "      <td>36.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16028</th>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28605</th>\n",
       "      <td>68.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21083</th>\n",
       "      <td>430.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4595</th>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28996</th>\n",
       "      <td>180.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>624</th>\n",
       "      <td>130.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27699</th>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19681</th>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7363 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       TARGET_in_lakhs\n",
       "26350            100.0\n",
       "23308             36.5\n",
       "16028             80.0\n",
       "28605             68.9\n",
       "21083            430.0\n",
       "...                ...\n",
       "4595              90.0\n",
       "28996            180.0\n",
       "624              130.0\n",
       "27699             74.0\n",
       "19681             60.0\n",
       "\n",
       "[7363 rows x 1 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# from sklearn.tree import DecisionTreeClassifier\n",
    "# decision_d = DecisionTreeClassifier(random_state = 0)\n",
    "# model_d  = decision_d.fit(X,Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "129.90541169148898\n",
      "Mean Squared Error: 305300.9323295861\n",
      "R-Squared: 0.27811258086427804\n",
      "Y-intercept: [330.64506287]\n",
      "Slope: [[ 1.28717598e-04 -3.45338590e+00 -1.48331186e+00]]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mae = mean_absolute_error(Y_test,pred)\n",
    "mse= mean_squared_error (Y_test,pred)\n",
    "r2=r2_score(Y_test,pred) \n",
    "plt.plot(X_test,pred,color='Black',marker='o')\n",
    "\n",
    "#Results\n",
    "print(mae)\n",
    "print(\"Mean Squared Error:\",mse)\n",
    "print(\"R-Squared:\",r2)\n",
    "print(\"Y-intercept:\",regressor.intercept_)\n",
    "print(\"Slope:\",regressor.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# #Training the Data Set\n",
    "# knnmodel = KNeighborsClassifier(n_neighbors=3)\n",
    "# knnmodel.fit(X_test,Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5.09628595e-06, 5.19154465e-01, 7.25671085e-01],\n",
       "       [4.99714292e-06, 5.12031642e-01, 7.22200856e-01],\n",
       "       [3.65419895e-06, 5.17189034e-01, 7.25795687e-01],\n",
       "       ...,\n",
       "       [4.00573455e-06, 6.62137795e-01, 7.19228406e-01],\n",
       "       [3.63031044e-06, 5.18439901e-01, 7.35244150e-01],\n",
       "       [3.51125580e-06, 6.61150024e-01, 7.19278446e-01]])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import preprocessing\n",
    "min_max = preprocessing.MinMaxScaler(feature_range=(0, 1))\n",
    "feature =  min_max.fit_transform(X)\n",
    "feature"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "to create standard values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.00973119, -1.34247787,  0.07201136],\n",
       "       [-0.00974446, -1.45454064, -0.01828927],\n",
       "       [-0.00992425, -1.37339983,  0.07525368],\n",
       "       ...,\n",
       "       [-0.00987719,  0.90706647, -0.09563692],\n",
       "       [-0.00992745, -1.35372005,  0.32111704],\n",
       "       [-0.00994339,  0.89152595, -0.09433482]])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "standard = preprocessing.StandardScaler()\n",
    "feature1 =  standard.fit_transform(X)\n",
    "feature1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean = 0\n",
      "std = 1\n"
     ]
    }
   ],
   "source": [
    "print(\"mean =\",round(feature1.mean()))\n",
    "print(\"std =\",round(feature1.std()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "to create this for if add all elements in dataset it will give 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\base.py:443: UserWarning: X has feature names, but Normalizer was fitted without feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.99817442, 0.00995683, 0.05957093],\n",
       "       [0.99815198, 0.0096093 , 0.06000233],\n",
       "       [0.99646456, 0.01364488, 0.0828987 ],\n",
       "       ...,\n",
       "       [0.99691855, 0.02625143, 0.07392067],\n",
       "       [0.99618074, 0.01386169, 0.08620786],\n",
       "       [0.9960003 , 0.02980129, 0.08423347]])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import Normalizer\n",
    "normalizer =  Normalizer(norm=\"l2\")\n",
    "normalizer.transform(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "decision = DecisionTreeRegressor(random_state = 0)\n",
    "model = decision.fit(X,Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=0)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeRegressor(random_state=0)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_d = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29451, 3)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "drop = df.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29451, 12)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29050, 12)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "drop.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29451, 3)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\USER\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but DecisionTreeRegressor was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([80.])"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "observation = [[2334,23,34]]\n",
    "model.predict(observation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "3\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "for r in range(4,1,-1):\n",
    "    print(r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "df95319d8ce4e1d89f5365ae10992bc1f65da593082b1d264e8f529830ec2f02"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
